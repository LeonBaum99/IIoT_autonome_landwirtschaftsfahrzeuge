import math
import random
import time
import paho.mqtt.client as mqtt
import json

def draw_fence(start_coords1, end_coords1, start_coords2, end_coords2, num_steps):
    # Convert coordinates to radians
    start_lat1, start_lon1 = math.radians(start_coords1[0]), math.radians(start_coords1[1])
    end_lat1, end_lon1 = math.radians(end_coords1[0]), math.radians(end_coords1[1])

    start_lat2, start_lon2 = math.radians(start_coords2[0]), math.radians(start_coords2[1])
    end_lat2, end_lon2 = math.radians(end_coords2[0]), math.radians(end_coords2[1])

    # Calculate bearing towards destination coordinates
    delta_lon1 = end_lon1 - start_lon1
    y1 = math.sin(delta_lon1) * math.cos(end_lat1)
    x1 = math.cos(start_lat1) * math.sin(end_lat1) - math.sin(start_lat1) * math.cos(end_lat1) * math.cos(delta_lon1)
    theta1 = math.atan2(y1, x1)

    delta_lon2 = end_lon2 - start_lon2
    y2 = math.sin(delta_lon2) * math.cos(end_lat2)
    x2 = math.cos(start_lat2) * math.sin(end_lat2) - math.sin(start_lat2) * math.cos(end_lat2) * math.cos(delta_lon2)
    theta2 = math.atan2(y2, x2)

    # Calculate step distance
    earth_radius = 6371000  # Radius of the Earth in meters
    total_distance1 = math.acos(math.sin(start_lat1) * math.sin(end_lat1) +
                                math.cos(start_lat1) * math.cos(end_lat1) * math.cos(delta_lon1)) * earth_radius
    step_distance1 = total_distance1 / num_steps

    total_distance2 = math.acos(math.sin(start_lat2) * math.sin(end_lat2) +
                                math.cos(start_lat2) * math.cos(end_lat2) * math.cos(delta_lon2)) * earth_radius
    step_distance2 = total_distance2 / num_steps

    # Calculate intermediate coordinates
    intermediate_coordinates = []
    
    # Add the starting coordinates to the list
    intermediate_coordinates.append([(start_coords2[0], start_coords2[1]), (start_coords1[0], start_coords1[1])])

    for step in range(1, num_steps + 1):
        current_distance1 = step * step_distance1
        intermediate_lat1 = math.asin(math.sin(start_lat1) * math.cos(current_distance1 / earth_radius) +
                                       math.cos(start_lat1) * math.sin(current_distance1 / earth_radius) * math.cos(theta1))
        intermediate_lon1 = start_lon1 + math.atan2(math.sin(theta1) * math.sin(current_distance1 / earth_radius) * math.cos(start_lat1),
                                                    math.cos(current_distance1 / earth_radius) - math.sin(start_lat1) * math.sin(intermediate_lat1))
        
        current_distance2 = step * step_distance2
        intermediate_lat2 = math.asin(math.sin(start_lat2) * math.cos(current_distance2 / earth_radius) +
                                       math.cos(start_lat2) * math.sin(current_distance2 / earth_radius) * math.cos(theta2))
        intermediate_lon2 = start_lon2 + math.atan2(math.sin(theta2) * math.sin(current_distance2 / earth_radius) * math.cos(start_lat2),
                                                    math.cos(current_distance2 / earth_radius) - math.sin(start_lat2) * math.sin(intermediate_lat2))
        
        # Convert intermediate coordinates back to degrees
        intermediate_lat1 = math.degrees(intermediate_lat1)
        intermediate_lon1 = math.degrees(intermediate_lon1)

        intermediate_lat2 = math.degrees(intermediate_lat2)
        intermediate_lon2 = math.degrees(intermediate_lon2)

        # Append the coordinates in reverse order for every second of the new inner list
        if step % 2 == 0:
            intermediate_coordinates.append([(intermediate_lat2, intermediate_lon2), (intermediate_lat1, intermediate_lon1)])
        else:
            intermediate_coordinates.append([(intermediate_lat1, intermediate_lon1), (intermediate_lat2, intermediate_lon2)])

    return intermediate_coordinates

# Function for creating the vehicle coordinates

def move_coordinates(start_coords, end_coords, num_steps):
    # Convert coordinates to radians
    start_lat, start_lon = math.radians(start_coords[0]), math.radians(start_coords[1])
    end_lat, end_lon = math.radians(end_coords[0]), math.radians(end_coords[1])

    # Calculate bearing towards destination coordinate
    delta_lon = end_lon - start_lon
    y = math.sin(delta_lon) * math.cos(end_lat)
    x = math.cos(start_lat) * math.sin(end_lat) - math.sin(start_lat) * math.cos(end_lat) * math.cos(delta_lon)
    theta = math.atan2(y, x)
    # Calculate step distance
    earth_radius = 6371000  # Radius of the Earth in meters
    total_distance = math.acos(math.sin(start_lat) * math.sin(end_lat) +
                               math.cos(start_lat) * math.cos(end_lat) * math.cos(delta_lon)) * earth_radius
    step_distance = total_distance / num_steps

    # Calculate intermediate coordinates
    intermediate_coordinates = [start_coords]  # Include the start coordinate in the list
    for step in range(1, num_steps + 1):
        current_distance = step * step_distance
        intermediate_lat = math.asin(math.sin(start_lat) * math.cos(current_distance / earth_radius) +
                                     math.cos(start_lat) * math.sin(current_distance / earth_radius) * math.cos(theta))
        intermediate_lon = start_lon + math.atan2(math.sin(theta) * math.sin(current_distance / earth_radius) * math.cos(start_lat),
                                                  math.cos(current_distance / earth_radius) - math.sin(start_lat) * math.sin(intermediate_lat))
        
        # Convert intermediate coordinates back to degrees
        intermediate_lat = math.degrees(intermediate_lat)
        intermediate_lon = math.degrees(intermediate_lon)

        intermediate_coordinates.append((intermediate_lat, intermediate_lon))

    return intermediate_coordinates

# Vehicle 1 coordinates

# Draw the fences
start_coordinates1_f1 = (48.82003, 11.54096)
end_coordinates1_f1 = (48.81844466684565, 11.541810667556259)
start_coordinates2_f1 = (48.82147, 11.54974)
end_coordinates2_f1 = (48.81986533341015, 11.550590667622242)
num_steps_f1 = 30
fence_coordinates_f1 = draw_fence(start_coordinates1_f1, end_coordinates1_f1, start_coordinates2_f1, end_coordinates2_f1, num_steps_f1)

# Create path coordinates between two corresponding fence coordinates
num_steps_path_f1 = 600
coords_f1 = []
for path in fence_coordinates_f1: # Structure: [[(), ()], [(), ()], ...]
    path_coords = move_coordinates(path[0], path[1], num_steps_path_f1)
    coords_f1 = coords_f1 + path_coords

# Vehicle 2 coordinates
    
    # Draw the fences
start_coordinates1_f2 = (48.8199753334437, 11.540989334259784)
end_coordinates1_f2 = (48.81839, 11.54184)
start_coordinates2_f2 = (48.82141466677351, 11.549769334273027)
end_coordinates2_f2 = (48.81981, 11.55062)
num_steps_f2 = 30
fence_coordinates_f2 = draw_fence(start_coordinates1_f2, end_coordinates1_f2, start_coordinates2_f2, end_coordinates2_f2, num_steps_f2)

# Create path coordinates between two corresponding fence coordinates
num_steps_path_f2 = 600
coords_f2 = []
for path in fence_coordinates_f2: # Structure: [[(), ()], [(), ()], ...]
    path_coords = move_coordinates(path[0], path[1], num_steps_path_f1)
    coords_f2 = coords_f2 + path_coords

'''
The actual code for simulating the behaviour of the 2 vehicles and generating all the sensor data, including
- publishing coords to NodeRed (and more sensordata)
- Subscribing to control signals from nodered and reacting accordingly

Pubilishing: every second
'''
    
# Signal-variables to control the loop in PublishVehicles
proximity_signal = False
arbeitssignal = False
ladesignal = False

# Coordinates of the charging stations
ladestation1 = (48.81913, 11.54114)
ladestation2 = (48.81907, 11.54116)

# Collaboration Energiemanagement + Autonomes Fahren
SoC_vehicle = 100

def decrease_battery():
    global SoC_vehicle
    SoC_vehicle = round(max(0, SoC_vehicle - 0.02), 2)

def battery_charge():
    global SoC_vehicle
    SoC_vehicle = round(min(100, SoC_vehicle + 0.5), 2)

def reset_battery():
    global SoC_vehicle
    SoC_vehicle = 100

# Additional variables for data publishing
spd_id_f1 =  "SDP-IIoT-092641" # Sensory Publishing Device
spd_id_f2 =  "SDP-IIoT-092642"

crop_yield_quantity = 0
motor_temp = 70

def increase_crop_yield():
    global crop_yield_quantity
    crop_yield_quantity = round(min(12000, crop_yield_quantity + 0.7), 2)

def clear_crop_yield():
    global crop_yield_quantity
    crop_yield_quantity = 0

def increase_motor_temp():
    global motor_temp
    # 70% likelihood to increase the temperature 
    if random.random() < 0.7:
        motor_temp += 0.04
        motor_temp = round(motor_temp, 2)
    else:
        motor_temp -= 0.04
        motor_temp = round(motor_temp, 2)
    # Limit motor temperature to 84 degrees
    motor_temp = min(84, motor_temp)

def decrease_motor_temp():
    global motor_temp
    motor_temp = max(20, motor_temp - 0.04)
    motor_temp = round(motor_temp, 2)

    

def reset_motor_temp():
    global motor_temp
    motor_temp = 70

# Publish and Subscribe topics used in the application
mqtt_publish_topic_1 = "group4/autonomesfahren/gps_fahrzeuge/fahrzeug1"
mqtt_publish_topic_2 = "group4/autonomesfahren/gps_fahrzeuge/fahrzeug2"
mqtt_subscribe_topic_proximity = "group4/autonomesfahren/gps_fahrzeuge/proximity_alert"
mqtt_subscribe_topic_arbeitssignal = "group4/autonomesfahren/arbeitssignal"
mqtt_subscribe_topic_ladesignal = "group4/autonomesfahren/ladesignal"

# Define the address
mqtt_broker_address = "wi-vm162-01.rz.fh-ingolstadt.de"
mqtt_broker_port = 1870



# Callback when the client connects to the broker
def on_connect(client, userdata, flags, rc):
    print("Connected with result code " + str(rc))
    client.subscribe([(mqtt_subscribe_topic_proximity, 0),(mqtt_subscribe_topic_arbeitssignal, 0), (mqtt_subscribe_topic_ladesignal, 0)])

# Callback when a message is received from the broker
def on_message(client, userdata, msg):
    global arbeitssignal
    global ladesignal
    global proximity_signal
    print(f"Received control signal: {msg.payload.decode()} on topic {msg.topic}")
    if msg.topic == mqtt_subscribe_topic_proximity:
        if msg.payload.decode() == "Alert!":
            proximity_signal = True
        else:
            proximity_signal = False
    elif msg.topic == mqtt_subscribe_topic_arbeitssignal:
        arbeitssignal = msg.payload.decode()=='true' 
        #print(f"Arbeitssignal: {arbeitssignal}") # debugging
    elif msg.topic == mqtt_subscribe_topic_ladesignal:
        ladesignal = msg.payload.decode()=='true'
        #print(f"Ladesignal: {ladesignal}") # debugging

# Create an MQTT client
mqtt_client = mqtt.Client()

# Set the callbacks
mqtt_client.on_connect = on_connect
mqtt_client.on_message = on_message

# Connect to the broker
mqtt_client.connect(mqtt_broker_address, mqtt_broker_port, keepalive=60)

mqtt_client.loop_start()

# Function to publish vehicle data for multiple vehicles, depending on incoming control signals
def PublishVehicles():
    i = 0
    while True:  # to run the loop indefinitely
        global proximity_signal
        global ladesignal
        if not arbeitssignal or proximity_signal:
            decrease_battery()
            decrease_motor_temp()
            # If arbeitssignal is off or proximity_signal is True, keep publishing the last known coordinates
            #payload_f1 = json.dumps({"latitude": coords_f1[i][0], "longitude": coords_f1[i][1]})
            payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": coords_f1[i][0], 
                    "longitude": coords_f1[i][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
            #payload_f2 = json.dumps({"latitude": coords_f2[i][0], "longitude": coords_f2[i][1]})
            payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": coords_f2[i][0], 
                    "longitude": coords_f2[i][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
            
            mqtt_client.publish(mqtt_publish_topic_1, payload=payload_f1, qos=0, retain=False)
            mqtt_client.publish(mqtt_publish_topic_2, payload=payload_f2, qos=0, retain=False)
            print(payload_f1, payload_f2)
            time.sleep(1)  # Provide a delay before next publication
            continue  # Skip to next loop iteration

        if ladesignal: 
            # Simulate the way to and from the charging stations
            charging_coords_f1 = move_coordinates(coords_f1[i], ladestation1, num_steps=100)
            charging_coords_f2 = move_coordinates(coords_f2[i], ladestation2, num_steps=100)
            for x in range(len(charging_coords_f1)): # simulate the way to the charging stations
                decrease_battery()
                increase_motor_temp()
                #charging_payload_f1 = json.dumps({"latitude": charging_coords_f1[x][0], "longitude": charging_coords_f1[x][1]})
                charging_payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": charging_coords_f1[x][0], 
                    "longitude": charging_coords_f1[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
                
                mqtt_client.publish(mqtt_publish_topic_1, payload=charging_payload_f1, qos=0, retain=False)
                
                #charging_payload_f2 = json.dumps({"latitude": charging_coords_f2[x][0], "longitude": charging_coords_f2[x][1]})
                charging_payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": charging_coords_f2[x][0], 
                    "longitude": charging_coords_f2[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )

                mqtt_client.publish(mqtt_publish_topic_2, payload=charging_payload_f2, qos=0, retain=False)
                print(charging_payload_f1, charging_payload_f2)
                time.sleep(1)
                while not arbeitssignal or proximity_signal:
                    decrease_battery()
                    decrease_motor_temp()
                    #charging_payload_f1 = json.dumps({"latitude": charging_coords_f1[x][0], "longitude": charging_coords_f1[x][1]})
                    charging_payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": charging_coords_f1[x][0], 
                    "longitude": charging_coords_f1[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
                    #charging_payload_f2 = json.dumps({"latitude": charging_coords_f2[x][0], "longitude": charging_coords_f2[x][1]})
                    charging_payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": charging_coords_f2[x][0], 
                    "longitude": charging_coords_f2[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
                    mqtt_client.publish(mqtt_publish_topic_1, payload=charging_payload_f1, qos=0, retain=False)
                    mqtt_client.publish(mqtt_publish_topic_2, payload=charging_payload_f2, qos=0, retain=False)
                    time.sleep(1)
            # Wait until charging is ended
            while ladesignal:
                battery_charge()
                increase_motor_temp()
                #currently_charging_payload_f1 = json.dumps({"latitude": ladestation1[0], "longitude": ladestation1[1]})
                currently_charging_payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": ladestation1[0], 
                    "longitude": ladestation1[1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )

                mqtt_client.publish(mqtt_publish_topic_1, payload=currently_charging_payload_f1, qos=0, retain=False)
                #currently_charging_payload_f2 = json.dumps({"latitude": ladestation2[0], "longitude": ladestation2[1]})
                currently_charging_payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": ladestation2[0], 
                    "longitude": ladestation2[1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )

                mqtt_client.publish(mqtt_publish_topic_2, payload=currently_charging_payload_f2, qos=0, retain=False)

                time.sleep(1)

            # Simulate the way back from the charging station
            back_coords_f1 = charging_coords_f1[::-1]
            back_coords_f2 = charging_coords_f2[::-1]
            for x in range(len(back_coords_f1)):
                decrease_battery()
                increase_motor_temp()
                #back_payload_f1 = json.dumps({"latitude": back_coords_f1[x][0], "longitude": back_coords_f1[x][1]})
                back_payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": back_coords_f1[x][0], 
                    "longitude": back_coords_f1[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )

                mqtt_client.publish(mqtt_publish_topic_1, payload=back_payload_f1, qos=0, retain=False)
                
                #back_payload_f2 = json.dumps({"latitude": back_coords_f2[x][0], "longitude": back_coords_f2[x][1]})
                back_payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": back_coords_f2[x][0], 
                    "longitude": back_coords_f2[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )

                mqtt_client.publish(mqtt_publish_topic_2, payload=back_payload_f2, qos=0, retain=False)
                print(back_payload_f1, back_payload_f2)
                time.sleep(1)
                while not arbeitssignal or proximity_signal:
                    decrease_battery()
                    decrease_motor_temp()
                    #back_payload_f1 = json.dumps({"latitude": back_coords_f1[x][0], "longitude": back_coords_f1[x][1]})
                    back_payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": back_coords_f1[x][0], 
                    "longitude": back_coords_f1[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
                    #back_payload_f2 = json.dumps({"latitude": back_coords_f2[x][0], "longitude": back_coords_f2[x][1]})
                    back_payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": back_coords_f2[x][0], 
                    "longitude": back_coords_f2[x][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
                    mqtt_client.publish(mqtt_publish_topic_1, payload=back_payload_f1, qos=0, retain=False)
                    mqtt_client.publish(mqtt_publish_topic_2, payload=back_payload_f2, qos=0, retain=False)
                    time.sleep(1)

            ladesignal = False 

        else: # Simulate the regular driving behaviour
            if i >= len(coords_f1):
                i = 0  # Reset when getting to the end of coordinates
                reset_motor_temp()
                clear_crop_yield()
                reset_battery()
            #payload_f1 = json.dumps({"latitude": coords_f1[i][0], "longitude": coords_f1[i][1]})
            decrease_battery()
            increase_crop_yield()
            increase_motor_temp()
            payload_f1 = json.dumps(
                {
                "device_id": spd_id_f1,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": coords_f1[i][0], 
                    "longitude": coords_f1[i][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
            #payload_f2 = json.dumps({"latitude": coords_f2[i][0], "longitude": coords_f2[i][1]})
            payload_f2 = json.dumps(
                {
                "device_id": spd_id_f2,
                "crop_yield": {
                    "quantity": crop_yield_quantity,
                    "unit": "kg"
                },
                "gps":{ 
                    "latitude": coords_f2[i][0], 
                    "longitude": coords_f2[i][1]
                },
                "battery": {
                   "state_of_charge": SoC_vehicle
                },
                "machine_status": {
                    "motor_temp_celsius": motor_temp,
                    "maintenance_required": False
                }
                }
            )
            mqtt_client.publish(mqtt_publish_topic_1, payload=payload_f1, qos=0, retain=False)
            mqtt_client.publish(mqtt_publish_topic_2, payload=payload_f2, qos=0, retain=False)
            print(payload_f1, payload_f2)
            i += 1

        time.sleep(1)  # Provide a delay before next coordinate is published
# Springen bei Rückweg Laden: Ladestation-letzte Pos. wenn Arbeitssignal an/aus, NodeRed Debug läuft durch bei Ladestation
# Run the publishing and subscribing functions
try:
    PublishVehicles()
finally:
    mqtt_client.disconnect()
